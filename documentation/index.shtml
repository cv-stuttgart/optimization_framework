<!DOCTYPE HTML>
<html>
<head>
<title>
Computer Vision and Intelligent Systems, University of Stuttgart
</title>
</head>

<body text="#000000" bgcolor="#FFFFFF">


<!-- ====================================================================== -->

<p class="inFormHeader">Optimization Framework for Optical Flow</p>

<p>&nbsp;</p>
<div class="textNormal" style="text-align: center; font-size: 15pt;">
This page provides the optimization framework as presented at
<a href="http://scia2017.org" target="_blank">SCIA 2017</a>
and information on how to adapt, compile and use it.
</div>
<p>&nbsp;</p>




<div class="grline">Overview</div>
<div class="textNormal">
Our optimization framework consists of a number of different parts:
<ul>
 <li> A standalone optimizer for a single machine called <span class="toolname">optimizerOF</span>.<br><br>
 <li> A distributed optimization suite consisting of
   <ul>
     <li> A tool that starts and manages the optimization called <span class="toolname">optimizerOF_Distributed</span>. It creates series of evaluation tasks.
     <li> A tool that controls the distribution of the evaluation tasks called <span class="toolname">optimizerOF_TaskServer</span>.
     <li> A client called <span class="toolname">optimizerOF_Client</span> that can be run on different computers and that fetches tasks from
          <span class="toolname">optimizerOF_TaskServer</span> and conducts the actual evaluation.
     <li> A PostgreSQL database that contains the evaluation tasks and serves as common memory of
          <span class="toolname">optimizerOF_Distributed</span> and <span class="toolname">optimizerOF_TaskServer</span>.
   </ul>
</ul>
In order to work properly, three more things are necessary:
<ul>
 <li><a href="sequencelists.shtml">Image sequence lists</a> that make the data of popular benchmarks known to the optimization framework (examples can be downloaded below).
 <li>An interface between the optical flow executable and the optimization framework (see below).
 <li>For the distributed optimization: A PostgreSQL-Database (<a href="https://www.postgresql.org/" target="_blank">https://www.postgresql.org/</a>) (tested with version 9.3.6).
</ul>
</div><br>

Please note that we use Synapse (<a href="http://www.ararat.cz/synapse/doku.php" target="_blank">http://www.ararat.cz/synapse/doku.php</a>,
<a href="http://wiki.freepascal.org/Synapse" target="_blank">http://wiki.freepascal.org/Synapse</a>) for implementing an HTTP-Server.
The necessary source files, however, are included in our download.
<br><br>
If you use our optimization framework for work you publish, please cite our paper:
<div class="bibtexEntry">
@Inbook{Stoll2017,<br>
&nbsp;&nbsp;author="Stoll, Michael and Volz, Sebastian and Maurer, Daniel and Bruhn, Andr{\'e}s",<br>
&nbsp;&nbsp;editor="Sharma, Puneet and Bianchi, Filippo Maria",<br>
&nbsp;&nbsp;title="A Time-Efficient Optimisation Framework for Parameters of Optical Flow Methods",<br>
&nbsp;&nbsp;bookTitle="Image Analysis: 20th Scandinavian Conference, SCIA 2017, Troms{\o}, Norway, June 12--14, 2017, Proceedings, Part I",<br>
&nbsp;&nbsp;year="2017",<br>
&nbsp;&nbsp;publisher="Springer International Publishing",<br>
&nbsp;&nbsp;address="Cham",<br>
&nbsp;&nbsp;pages="41--53",<br>
&nbsp;&nbsp;isbn="978-3-319-59126-1",<br>
&nbsp;&nbsp;doi="10.1007/978-3-319-59126-1_4",<br>
&nbsp;&nbsp;url="http://dx.doi.org/10.1007/978-3-319-59126-1_4"<br>
}
</div>
</div><br>





<div class="grline">Compilation &amp; Adaptation</div>
<div class="textNormal">
The optimization framework is written in FreePascal (<a href="https://www.freepascal.org/" target="_blank">https://www.freepascal.org/</a>)
and provided as a set of Lazarus projects 
(<a href="https://www.lazarus-ide.org/" target="_blank">https://www.lazarus-ide.org/</a>). 
Each tool is generated by its own project which is defined by a corresponding <span class="cmdLine">*.lpi</span>-file. Opening this file in Lazarus and clicking 
the play-button or pressing (Ctrl+)F9 should compile the respective tool.<br><br>
</div>

<!--<hr size="1">-->
<div class="grline_sub">Interface to Executables</div>

<div class="textNormal">
In order to define an interface to your optical flow executable only a single class with two class methods needs to be 
implemented. Such classes, which we call estimation binary classes, lie in <span class="cmdLine">problemTypes/ptOpticalFlow/ebInterfaces</span>. They
are used by <span class="toolname">optimizerOF</span>, <span class="toolname">optimizerOF_Distributed</span> and <span class="toolname">optimizerOF_Client</span>.<br>
You may be guided by the already implemented estimation binary classes lying in that directory.
<ol>
 <li>Open <span class="cmdLine">optimizerOF.lpi</span>.
 <li>Create a new unit via File --> New Unit and save it in the above mentioned directory. We recommend to save it as
     <span class="cmdLine">uebNAME.pas</span>, where NAME can be replaced either by the method name or by the author name.
 <li>Add the units <span class="sourceCode">Process</span>, <span class="sourceCode">StrUtils</span>, 
     <span class="sourceCode">uDatatypesOptimizer</span> and <span class="sourceCode">uEvaluationBinary</span> to the <span class="sourceCode">uses</span>-part of the unit.
 <li>Create a class <span class="sourceCode">TEB_NAME</span> that inherits from <span class="sourceCode">TEvaluationBinary</span> 
     and implement the methods <span class="sourceCode">getCmdLineParamters</span> and <span class="sourceCode">executeProcess</span> 
     that assemble the command line call of your optical flow executable and that run it and parse its output, respectively.
 <li>In the <span class="sourceCode">initialization</span>-section of the unit call <span class="sourceCode">ebClassManager.registerClass('IDENTIFIER', TEB_NAME)</span> in order to make your
     executable available to the optimization framework under the name IDENTIFIER. IDENTIFIER and NAME should be adapted according
     to your preferences.<br>
     IDENTIFIER is the name that is later in the command line parameter <span class="cmdLineParam">--evaluationBinary=IDENTIFIER</span> of 
     <span class="toolname">optimizerOF</span> and <span class="toolname">optimizerOF_Distributed</span>, respectively. 
     This parameter tells the optimization framework which executable shall conduct the evaluations.
 <li>Adapt the <span class="sourceCode">uses</span>-section of the unit <span class="sourceCode">uebIncludeAll</span> by inserting your newly created unit.
 <li>Compile all mentioned tools that make use of the newly created class.
</ol><br>
</div>

<!--<hr size="1">-->
<div class="grline_sub">Parameter Selection Algorithms</div>

<div class="textNormal">
In order to define another parameter selection algorithm (additional to Downhill Simplex, CMA-ES etc.) a class inheriting
from <span class="sourceCode">TParameterSelection</span> has to be implemented and stored in the diretory <span class="cmdLine">psStrategies</span>. This class will be used 
by <span class="toolname">optimizerOF</span> and <span class="toolname">optimizerOF_Distributed</span>.<br>
You may be guided by the already implemented parameter selection classes lying in that directory.
<ol>
 <li>Open <span class="cmdLine">optimizerOF.lpi</span>.
 <li>Create a new unit via File --> New Unit and save it in the above mentioned directory. We recommend to save it as
     <span class="cmdLine">ups_NAME.pas</span>, where NAME can be replaced the name of the parameter selection algorithm.
 <li>Add the units <span class="sourceCode">uDatatypesOptimizer</span>, <span class="sourceCode">uParameterSelection</span> and 
     <span class="sourceCode">uOptimizationRun</span> to the <span class="sourceCode">uses</span>-part of the unit.
 <li>Create a class <span class="sourceCode">TPS_NAME</span> that inherits from <span class="sourceCode">TParameterSelection</span> 
     and override the constructor <span class="sourceCode">Create</span> (where the parameters of your algorithm may be parsed), 
     the method <span class="sourceCode">runOptimization</span> that steers the optimization process according to
     the parameter selection algorithm and the class method <span class="sourceCode">helpText</span> that may return a string indicating the parameters
     of the new algorithm.
 <li>In the <span class="sourceCode">initialization</span>-section of the unit call 
     <span class="sourceCode">psClassManager.registerClass('IDENTIFIER', TPS_NAME)</span> in order to make your
     algorithm available to the optimization framework under the name IDENTIFIER. IDENTIFIER and NAME should be adapted according
     to your preferences.<br>
     IDENTIFIER is the name that is later in the command line parameter <span class="cmdLineParam">--psStrategy=IDENTIFIER</span> of 
     <span class="toolname">optimizerOF</span> and <span class="toolname">optimizerOF_Distributed</span>, respectively. 
     This parameter tells the optimization framework which parameter selection algorithm shall
     steer the optimization.
 <li>Adapt the <span class="sourceCode">uses</span>-section of the unit <span class="sourceCode">upsIncludeAll</span> by inserting your newly created unit.
 <li>Compile all mentioned tools that make use of the newly created class.
</ol>
If you have implemented further algorithms, we would highly appreciate if you provide them to us for sharing with the community.
</div><br>





<div class="grline">Plan B: Adapt your executable</div>
<div class="textNormal">
In case you would like to use the optimization framework without implementing an interface class for your executable, you
can alternatively adapt your executable in order to work with the standard interface (as implemented in the unit <span class="cmdLine">uebStoll</span>).
<ol>
 <li>Rename your executable into <span class="cmdLine">batchOF</span>.<br><br>
 <li>Implement the following command line parameters:
  <ul>
   <li><span class="cmdLineParam">-i="IMAGE1;IMAGE2;IMAGE3;..."</span> in order to read images (e.g. -i="image_0/000015_10.png;image_0/000015_11.png").
   <li><span class="cmdLineParam">--binaryFiles="FILE1;FILE2;FILE3;.."</span> in order to read supplementary files.
   <li><span class="cmdLineParam">-r=NO</span> in order to set the reference frame (the frame where the estimated flow has its origin) to NO (e.g. -r=0).
   <li><span class="cmdLineParam">-g=FILE</span> in order to read the ground truth file (e.g. -g=flow_noc/000015_10.png).
   <li><span class="cmdLineParam">--vmset=NAME=VALUE</span> in order to set the model parameter NAME to VALUE (e.g. --vmset=Alpha=10).
   <li><span class="cmdLineParam">--vsset=NAME=VALUE</span> in order to set the solver parameter NAME to VALUE.
  </ul>
  It is not necessary to implement different types of parameters (i.e. model and solver). In the definition of a parameter
  that is supposed to be optimized, one can decide if it belongs to the model or to the solver.<br><br>
  An example call of the executable for evaluation looks like this:
<div class="exampleCall">
./batchOF CMDLINE -i="image_2/000019_10.png;image_2/000019_11.png" -r=0 -g="flow_occ/000019_10.png" --vmset="TGV (Similarity)=26.705757056778" --vmset="TGV (Smoothness)=38.74040096632" --vmset="Image Gradient (O)=29.6609652232728"
</div>
 <span class="cmdLine">CMDLINE</span> contains command line parameters as provided by <span class="cmdLineParam">--cmdLine</span> of the 
 optimizer (see below).<br><br>
 <li>Adapt the command line output (i.e. <span class="cmdLine">stdout</span>) such that the last three lines state the error values in the following form:
  <div class="exampleCall">
AAE: 1.23456<br>
AEE: 1.23456<br>
BP: 0.00%
  </div>
</ol>
</div><br>






<div class="grline">Installation</div>
<div  class="textNormal">
In order to use the optimization framework, an interface to the optical flow executable has to be defined.
The procedure is described in the chapter Adaptation.<br>
In the following, we will describe how the optimization framework is deployed.

<ol>
<li>Install a PostgreSQL-Database (the framework ist tested with version 9.3.6)
<li>Setup the PostgreSQL-Database using the installation SQL script.
<li>Put <span class="toolname">optimizerOF_Distributed</span> and <span class="filename">optimizerOF_Distributed.xml</span> in a directory on a computer where you want to control the optimizations.
    Please not that it must have access to the PostgreSQL-Database.
<li>Put <span class="toolname">optimizerOF_TaskServer</span> in a directory on a computer which is reachable by the clients. If it is different from the place
    where <span class="toolname">optimizerOF_Server</span> is located, also place <span class="filename">optimizerOF_Server.xml</span> there. Please note that it must have access to the 
    PostgreSQL-Database and that <span class="toolname">optimizerOF_TaskServer</span> runs an HTTP-Server, thus opening a port  (Standard: 8082) which must be 
    accessible by the clients.
<li>Configure <span class="filename">optimizerOF_Distributed.xml</span> by inserting host, port, user, password and name of the PostgreSQL-Database.
<li>On each client, copy <span class="toolname">optimizerOF_Client</span> and <span class="filename">optimizerOF_Client.xml</span> in the same directory where your optical flow executable 
    is located.
<li>Configure <span class="filename">optimizerOF_Client.xml</span> by providing the correct hostname and port of the HTTP-Server in the given URLs (see 3.).
</ol>
</div><br>

<div class="grline">Usage</div>
<div class="textNormal">
After having provided the optimization framework with an interface to your optical flow executable and having completed the
installation, we can now focus on its usage. There are actually a lot of command line parameters for the different tools
which we will introduce in details in the following.<br>
<ol>
 <li>Start <span class="toolname">optimizerOF_TaskServer</span> which controls the distribution of the evaluation tasks.<br>
     It has the following command line parameters (with example values):
   <ul>
     <li><span class="cmdLineParam">--httpPort=80</span> sets the port of the HTTP-Server to 80 (Standard: 8083).
     <li><span class="cmdLineParam">--unrestrictedTaskAssignments=1</span> deactivates the Minimal Completion Time algorithm and switches to the first come, 
        first serve-principle (Standard: 0).
     <li><span class="cmdLineParam">--minUpdateInterval=60</span> changes the minimal interval of fetching tasks from the database an recomputing the distribution
        to 60 seconds (Standard: 2). The actual interval is also influenced by the relation between available tasks and
        available client threads, i.e. the higher the ratio of tasks and threads, the longer is the interval (in order to
        reduce overhead).
     <li><span class="cmdLineParam">--useDBLocks=1</span> enforces the locking of the database for each operation (such as fetching tasks or submission of 
        results) (not recommended) (Standard: 0).
   </ul><br>
 <li>On each computer that shall participate in the optimization start <span class="toolname">optimizerOF_Client</span>.<br>
     It has the following command line parameters (with example values):
   <ul>
     <!--<li><span class="cmdLineParam">--evaluationBinary=NAME</span> chooses a specific optical flow executable registered under the given identifier (Standard:
         empty, i.e. the executable is chosen that is registered under the empty identifier).-->
     <li><span class="cmdLineParam">--numThreads=NUMBER</span> creates NUMBER threads for the evaluation (Standard: 1).
     <!--<li><span class="cmdLineParam">--fastThreads=NUMBER</span> should be chosen equal to --numThreads.-->
     <li><span class="cmdLineParam">--noAdaptiveScheduling=1</span> allows this client to fetch tasks even if none have been assigned to it (only recommended for
         fast clients) (Standard: 0).
     <li><span class="cmdLineParam">--deadline=60</span> lets the client terminate after the completion of all tasks that are under  computation after 60 minutes
         (Standard: not set). 
     <li><span class="cmdLineParam">--userName=NAME</span> allows to fetch tasks for the user given by NAME (Standard: name of the user logged in to the computer).
     <li><span class="cmdLineParam">--taskName=NAME</span> allows to fetch tasks that are identified by NAME (Standard: name of the user logged in to the computer).
   </ul><br>
  <li>For each optimization to be done, start <span class="toolname">optimizerOF_Distributed</span>.<br>
     It has the following command line parameters (with example values):
    <ul>
     <li><span class="cmdLineParam">--help</span> or <span class="cmdLineParam">-h</span> display information about the parameters.
     <li><span class="cmdLineParam">--imgSrc=FILENAME</span> or <span class="cmdLineParam">--imgSrc=stdin</span> provides the optimization framework with the benchmarking data.
     <li><span class="cmdLineParam">--errorValueName=AEE</span> sets the error measure to AEE (possible values as defined by the interface of the executable).
     <li><span class="cmdLineParam">--evaluationBinary=NAME</span> chooses a specific optical flow executable registered under the given identifier (Standard:
         empty, i.e. the executable is chosen that is registered under the empty identifier).
     <li><span class="cmdLineParam">--psStrategy=downhillSimplex</span> sets the parameter selection algorithm to Downhill Simplex (possible choices are given by
         <span class="cmdLineParam">--help</span>).
     <li><span class="cmdLineParam">--psStrategyParams=STRING</span> provides the chosen parameter selection algorithm with parameters according to its needs.
     <li><span class="cmdLineParam">--logFile=FILENAME</span> states the log file where the output shall be saved.
     <li><span class="cmdLineParam">-p=PARAMETERDEFINITION</span> defines a parameter that shall be optimized containing among others the name of the parameter,
        its type and a range of values. Details depend on the parameter selection strategy and can be found <a href="parameterdefinition.shtml">here</a>
        and when using <span class="cmdLineParam">--help</span>.
     <li><span class="cmdLineParam">--cmdLine=STRING</span> provides command line parameters which are passed to the executable (replace double quotes by single
        quotes in STRING) (Example: <span class="cmdLineParam">--cmdLine="--basepath='/home/user/images/'"</span> will add <span class="cmdLineParam">--basepath="/home/user/images"</span> to all
        command line calls of the optical flow executable).
     <li><span class="cmdLineParam">--printOutput=1</span> display/logs the output of the optical flow executable in any case (Standard: 0, i.e. only in failure
        cases the output of the executable will be displayed).
     <li><span class="cmdLineParam">--userName=NAME</span> assignes the tasks with the user given by NAME (Standard: name of the user logged in to the computer).
     <li><span class="cmdLineParam">--taskName=NAME</span> assignes the tasks a name given by NAME (Standard: name of the user logged in to the computer).
     <li><span class="cmdLineParam">--workingDir=PATH</span> changes the working directory of the optical flow executable (Standard: not set).
     <li><span class="cmdLineParam">--priority=REAL</span> sets the priority of the optimization where higher values denote higher priority. Any real number 
         (including negative ones) is possible (Standard: 0).
     <li><span class="cmdLineParam">--deadline=30</span> sets the deadline for the runtime of the evaluation tasks to 30 minutes (Standard: 15). In case something 
         goes wrong and the computation of a task has not finished after the given amount of minutes, it will be redistributed 
         among the clients (at most twice). 
     <li><span class="cmdLineParam">--varianceQuantile=20</span> defines that after an initial family of optimization runs a subset of 20% of the benchmark data is
         determined that will be used for all further optimization runs (Standard: 100).
     <li><span class="cmdLineParam">--useDBLocks=1</span> enforces the locking of the database for each operation (such as inserting or deleting tasks)
         (not recommended) (Standard: 0).
    </ul>
  <li>Visit the <a href="status.shtml">status page</a> of <span class="toolname">optimizerOF_TaskServer</span> by opening <em>http://COMPUTERNAME:PORT/</em> in a web browser (where COMPUTERNAME 
      is the name of the computer where <span class="toolname">optimizerOF_TaskServer</span> is running and PORT is the chosen Port of the HTTP-Server.
</ol>
The standalone optimizer <span class="toolname">optimizerOF</span> only uses a single machine for optimization and does not need any other programs of
the framework to be active. It mostly shares its parameters with <span class="toolname">optimizerOF_Distributed</span>, but has an additional parameter 
<span class="cmdLineParam">--numThreads</span> (like the clients) and does not need the parameters <span class="cmdLineParam">--deadline</span>, 
<span class="cmdLineParam">--priority</span>, <span class="cmdLineParam">--userName</span>, <span class="cmdLineParam">--taskName</span>,
<span class="cmdLineParam">--useDBLocks</span>.<br>
We recommend that all tools of the optimization framework are started within a <span class="cmdLine">screen</span>-session.
</div><br>

<div class="grline">Examples</div>
<div class="textNormal">
In order to test if the optimization framework works as expected, we provide an example executable <span class="toolname">optimizerTest</span> which implements 
the <em>Rosenbrock function</em> function depending on two parameters <em>alpha</em> and <em>beta</em>. The interface class for this executable is registered
as <span class="sourceCode">ofTest</span>:<br>
<ul>
 <li>Standalone optimization:<br><br>
     <div class="exampleCall">
./optimizerOF --imgSrc=sequenceLists/Dummy --errorValueName=T --psStrategy=cma_es --evaluationBinary=ofTest -p="alpha;1;0;floatNN;1" -p="beta;1;0;floatNN;0.1" --logFile=optimizerLogs/test/rosenbrock_cma_es.log --numThreads=4
     </div><br><br>
 <li>Distributed optimization:<br><br>
   <ol>
     <li> Start <span class="toolname">optimizerOF_TaskServer</span> (make sure <em>only</em> 1 instance is running).
          <div class="exampleCall">
./optimizerOF_TaskServer
          </div><br>
     <li> Start instances of <span class="toolname">optimizerOF_Client</span> on one or more computers.
          <div class="exampleCall">
./optimizerOF_Client --numThreads=4
          </div><br>
     <li> Start <span class="toolname">optimizerOF_Distributed</span>.
          <div class="exampleCall">
./optimizerOF_Distributed --imgSrc=sequenceLists/Dummy --errorValueName=T --psStrategy=cma_es --evaluationBinary=ofTest -p="alpha;1;0;floatNN;1" -p="beta;1;0;floatNN;0.1" --logFile=optimizerLogs/test/rosenbrock_cma_es.log
          </div><br>
   </ol>
</ul>
If the information on the benchmark is generated by a script (e.g. PHP) it might be read via stdin by the optimization framework. 
<br><br>Example:<br><br>
<div class="exampleCall">
php -f sequenceLists/KITTI_2015/KITTI_2015.php | ./optimizerOF_Distributed --deadline=40 --imgSrc="stdin" --varianceQuantile=20 --errorValueName="BP" --psStrategy="downhillSimplex" --psStrategyParams="cvParameterAndResult;1.001" --cmdLine="" -p="TGV (Similarity);1;0;floatP;0.5,30" -p="TGV (Smoothness);1;0;floatP;0.5,30" -p="Image Gradient (O);1;0;floatNN;0,50" --logFile="optimizerLogs/MYMETHOD/KITTI_optimize_BP_T30_T30_I30.log"
</div>
</div><br>

<div class="grline">FAQ and Remarks</div>
<div class="textNormal">
Further information can be found <a href="remarks.shtml">here</a>.
</div><br>

</body>
</html>

